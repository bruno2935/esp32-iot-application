[1/13] Generating ../../index.html.S
[2/13] Generating ../../app.js.S
[3/13] Building ASM object esp-idf/main/CMakeFiles/__idf_main.dir/__/__/index.html.S.obj
[4/13] Building ASM object esp-idf/main/CMakeFiles/__idf_main.dir/__/__/app.js.S.obj
[5/13] Performing build step for 'bootloader'
[1/1] cd /home/bruno/Documents/esp32-projects/esp32-iot-application/build/bootloader/esp-idf/esptool_py && /home/bruno/.espressif/python_env/idf5.2_py3.10_env/bin/python /home/bruno/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /home/bruno/Documents/esp32-projects/esp32-iot-application/build/bootloader/bootloader.bin
Bootloader binary size 0x68a0 bytes. 0x760 bytes (7%) free.
[6/11] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/http_server.c.obj
[7/11] Linking C static library esp-idf/main/libmain.a
[8/11] Generating ld/sections.ld
[9/11] Linking CXX executable esp32-iot-application.elf
[10/11] Generating binary image from built executable
esptool.py v4.6.2
Creating esp32 image...
Merged 25 ELF sections
Successfully created esp32 image.
Generated /home/bruno/Documents/esp32-projects/esp32-iot-application/build/esp32-iot-application.bin
[11/11] cd /home/bruno/Documents/esp32-projects/esp32-iot-application/build/esp-idf/esptool_py && /home/bruno/.espressif/python_env/idf5.2_py3.10_env/bin/python /home/bruno/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/bruno/Documents/esp32-projects/esp32-iot-application/build/partition_table/partition-table.bin /home/bruno/Documents/esp32-projects/esp32-iot-application/build/esp32-iot-application.bin
esp32-iot-application.bin binary size 0x112730 bytes. Smallest app partition is 0x1f0000 bytes. 0xdd8d0 bytes (45%) free.
